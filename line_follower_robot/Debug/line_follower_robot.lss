
line_follower_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c54  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000ce8  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002820  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d9  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000266  00000000  00000000  000031b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c8  00000000  00000000  0000341f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b8  00000000  00000000  00003b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000858  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 04 	call	0x94c	; 0x94c <main>
  8a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetpindir>:
#include "Std_macros.h"

void DIO_vsetpindir(unsigned char port,unsigned char pin,unsigned char direction){
	
	
	switch(port){
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetpindir+0x6>
  96:	54 c0       	rjmp	.+168    	; 0x140 <DIO_vsetpindir+0xae>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetpindir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetpindir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetpindir+0x14>
  a4:	6a c0       	rjmp	.+212    	; 0x17a <DIO_vsetpindir+0xe8>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetpindir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetpindir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetpindir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetpindir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetpindir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetpindir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetpindir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetpindir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetpindir+0x32>
  c2:	5b c0       	rjmp	.+182    	; 0x17a <DIO_vsetpindir+0xe8>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetpindir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetpindir+0x120>
  ca:	3a c0       	rjmp	.+116    	; 0x140 <DIO_vsetpindir+0xae>
		
		case 'A':
		case 'a':
		if (direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetpindir+0x58>
		{
			SET_BIT(DDRA,pin);//Set the direction of the given pin in port A as output
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetpindir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetpindir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			//DDRA |=(1<<pin);

		} 
		else
		{
			CLR_BIT(DDRA,pin);//CLEAR the direction of the given pin in port A as input
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetpindir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetpindir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetpindir+0x92>
		{
			SET_BIT(DDRB,pin);//Set the direction of the given pin in port B as output
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetpindir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetpindir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);//CLEAR the direction of the given pin in port B as input
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetpindir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetpindir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetpindir+0xcc>
		{
			SET_BIT(DDRD,pin);//Set the direction of the given pin in port D as output
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetpindir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetpindir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	61 bb       	out	0x11, r22	; 17
 15c:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);//CLEAR the direction of the given pin in port D as input
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetpindir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetpindir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	61 bb       	out	0x11, r22	; 17
 178:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetpindir+0x106>
		{
			SET_BIT(DDRC,pin);//Set the direction of the given pin in port C as output
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetpindir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetpindir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	64 bb       	out	0x14, r22	; 20
 196:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);//CLEAR the direction of the given pin in port C as input
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetpindir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetpindir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	64 bb       	out	0x14, r22	; 20
 1b2:	08 95       	ret

000001b4 <DIO_vwrite>:
}
//port direction==output
void DIO_vwrite(unsigned char port,unsigned char pin,unsigned char val){
	
	
	switch(port){
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite+0x6>
 1b8:	54 c0       	rjmp	.+168    	; 0x262 <DIO_vwrite+0xae>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite+0x14>
 1c6:	6a c0       	rjmp	.+212    	; 0x29c <DIO_vwrite+0xe8>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite+0x32>
 1e4:	5b c0       	rjmp	.+182    	; 0x29c <DIO_vwrite+0xe8>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite+0x120>
 1ec:	3a c0       	rjmp	.+116    	; 0x262 <DIO_vwrite+0xae>
		
		case 'A':
		case 'a':
		if (val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite+0x58>
		{
			SET_BIT(PORTA,pin);//Set the value of the given pin in port A as High
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
			//PORTA |=(1<<pin);

		}
		else
		{
			CLR_BIT(PORTA,pin);//Set the value of the given pin in port A as LOW
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite+0x92>
		{
			SET_BIT(PORTB,pin);//Set the value of the given pin in port B as High
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);//Set the value of the given pin in port B as LOW
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite+0xcc>
		{
			SET_BIT(PORTD,pin);//Set the value of the given pin in port D as High
 266:	22 b3       	in	r18, 0x12	; 18
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	62 bb       	out	0x12, r22	; 18
 27e:	08 95       	ret


		}
		else
		{
			CLR_BIT(PORTD,pin);//Set the value of the given pin in port D as LOW
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	62 bb       	out	0x12, r22	; 18
 29a:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite+0x106>
		{
			SET_BIT(PORTC,pin);//Set the value of the given pin in port C as High
 2a0:	25 b3       	in	r18, 0x15	; 21
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	65 bb       	out	0x15, r22	; 21
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);//Set the value of the given pin in port C as LOW
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	65 bb       	out	0x15, r22	; 21
 2d4:	08 95       	ret

000002d6 <DIO_vtogglepin>:
		
	}
}

void DIO_vtogglepin(unsigned char port,unsigned char pin){
	switch(port){
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	81 f1       	breq	.+96     	; 0x33a <DIO_vtogglepin+0x64>
 2da:	85 34       	cpi	r24, 0x45	; 69
 2dc:	40 f4       	brcc	.+16     	; 0x2ee <DIO_vtogglepin+0x18>
 2de:	82 34       	cpi	r24, 0x42	; 66
 2e0:	f9 f0       	breq	.+62     	; 0x320 <DIO_vtogglepin+0x4a>
 2e2:	83 34       	cpi	r24, 0x43	; 67
 2e4:	b8 f5       	brcc	.+110    	; 0x354 <DIO_vtogglepin+0x7e>
 2e6:	81 34       	cpi	r24, 0x41	; 65
 2e8:	09 f0       	breq	.+2      	; 0x2ec <DIO_vtogglepin+0x16>
 2ea:	40 c0       	rjmp	.+128    	; 0x36c <DIO_vtogglepin+0x96>
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <DIO_vtogglepin+0x30>
 2ee:	82 36       	cpi	r24, 0x62	; 98
 2f0:	b9 f0       	breq	.+46     	; 0x320 <DIO_vtogglepin+0x4a>
 2f2:	83 36       	cpi	r24, 0x63	; 99
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <DIO_vtogglepin+0x26>
 2f6:	81 36       	cpi	r24, 0x61	; 97
 2f8:	c9 f5       	brne	.+114    	; 0x36c <DIO_vtogglepin+0x96>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <DIO_vtogglepin+0x30>
 2fc:	83 36       	cpi	r24, 0x63	; 99
 2fe:	51 f1       	breq	.+84     	; 0x354 <DIO_vtogglepin+0x7e>
 300:	84 36       	cpi	r24, 0x64	; 100
 302:	a1 f5       	brne	.+104    	; 0x36c <DIO_vtogglepin+0x96>
 304:	1a c0       	rjmp	.+52     	; 0x33a <DIO_vtogglepin+0x64>
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);//Toggle the value of the given pin in port A
 306:	2b b3       	in	r18, 0x1b	; 27
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ac 01       	movw	r20, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vtogglepin+0x3e>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vtogglepin+0x3a>
 318:	ba 01       	movw	r22, r20
 31a:	62 27       	eor	r22, r18
 31c:	6b bb       	out	0x1b, r22	; 27
		break;
 31e:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);//Toggle the value of the given pin in port B
 320:	28 b3       	in	r18, 0x18	; 24
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	ac 01       	movw	r20, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_vtogglepin+0x58>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_vtogglepin+0x54>
 332:	ba 01       	movw	r22, r20
 334:	62 27       	eor	r22, r18
 336:	68 bb       	out	0x18, r22	; 24
		break;
 338:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);//Toggle the value of the given pin in port D
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_vtogglepin+0x72>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_vtogglepin+0x6e>
 34c:	ba 01       	movw	r22, r20
 34e:	62 27       	eor	r22, r18
 350:	62 bb       	out	0x12, r22	; 18
		break;
 352:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);//Toggle the value of the given pin in port C
 354:	25 b3       	in	r18, 0x15	; 21
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	ac 01       	movw	r20, r24
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_vtogglepin+0x8c>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_vtogglepin+0x88>
 366:	ba 01       	movw	r22, r20
 368:	62 27       	eor	r22, r18
 36a:	65 bb       	out	0x15, r22	; 21
 36c:	08 95       	ret

0000036e <DIO_uread>:
		default:break;
	}
}
unsigned char DIO_uread(unsigned char port ,unsigned char pin){
	unsigned char return_value;
	switch(port){
 36e:	84 34       	cpi	r24, 0x44	; 68
 370:	09 f4       	brne	.+2      	; 0x374 <DIO_uread+0x6>
 372:	51 c0       	rjmp	.+162    	; 0x416 <DIO_uread+0xa8>
 374:	85 34       	cpi	r24, 0x45	; 69
 376:	40 f4       	brcc	.+16     	; 0x388 <DIO_uread+0x1a>
 378:	82 34       	cpi	r24, 0x42	; 66
 37a:	39 f1       	breq	.+78     	; 0x3ca <DIO_uread+0x5c>
 37c:	83 34       	cpi	r24, 0x43	; 67
 37e:	c0 f5       	brcc	.+112    	; 0x3f0 <DIO_uread+0x82>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	09 f0       	breq	.+2      	; 0x386 <DIO_uread+0x18>
 384:	5a c0       	rjmp	.+180    	; 0x43a <DIO_uread+0xcc>
 386:	0e c0       	rjmp	.+28     	; 0x3a4 <DIO_uread+0x36>
 388:	82 36       	cpi	r24, 0x62	; 98
 38a:	f9 f0       	breq	.+62     	; 0x3ca <DIO_uread+0x5c>
 38c:	83 36       	cpi	r24, 0x63	; 99
 38e:	20 f4       	brcc	.+8      	; 0x398 <DIO_uread+0x2a>
 390:	81 36       	cpi	r24, 0x61	; 97
 392:	09 f0       	breq	.+2      	; 0x396 <DIO_uread+0x28>
 394:	52 c0       	rjmp	.+164    	; 0x43a <DIO_uread+0xcc>
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <DIO_uread+0x36>
 398:	83 36       	cpi	r24, 0x63	; 99
 39a:	51 f1       	breq	.+84     	; 0x3f0 <DIO_uread+0x82>
 39c:	84 36       	cpi	r24, 0x64	; 100
 39e:	09 f0       	breq	.+2      	; 0x3a2 <DIO_uread+0x34>
 3a0:	4c c0       	rjmp	.+152    	; 0x43a <DIO_uread+0xcc>
 3a2:	39 c0       	rjmp	.+114    	; 0x416 <DIO_uread+0xa8>
		
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pin);//Read the value from the given pin in port A
 3a4:	29 b3       	in	r18, 0x19	; 25
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	06 2e       	mov	r0, r22
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_uread+0x44>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_uread+0x40>
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	82 23       	and	r24, r18
 3ba:	93 23       	and	r25, r19
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_uread+0x54>
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_uread+0x50>
 3c6:	98 2f       	mov	r25, r24
		break;
 3c8:	38 c0       	rjmp	.+112    	; 0x43a <DIO_uread+0xcc>


	case 'B':
	case 'b':
	return_value=READ_BIT(PINB,pin);//Read the value from the given pin in port B
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_uread+0x6a>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_uread+0x66>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_uread+0x7a>
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_uread+0x76>
 3ec:	98 2f       	mov	r25, r24
	break;
 3ee:	25 c0       	rjmp	.+74     	; 0x43a <DIO_uread+0xcc>
		
			case 'C':
			case 'c':
			return_value=READ_BIT(PINC,pin);//Read the value from the given pin in port C
 3f0:	23 b3       	in	r18, 0x13	; 19
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	06 2e       	mov	r0, r22
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_uread+0x90>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_uread+0x8c>
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	82 23       	and	r24, r18
 406:	93 23       	and	r25, r19
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_uread+0xa0>
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_uread+0x9c>
 412:	98 2f       	mov	r25, r24
			break;
 414:	12 c0       	rjmp	.+36     	; 0x43a <DIO_uread+0xcc>
			
				case 'D':
				case 'd':
				return_value=READ_BIT(PIND,pin);//Read the value from the given pin in port D
 416:	20 b3       	in	r18, 0x10	; 16
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	06 2e       	mov	r0, r22
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_uread+0xb6>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_uread+0xb2>
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	82 23       	and	r24, r18
 42c:	93 23       	and	r25, r19
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_uread+0xc6>
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_uread+0xc2>
 438:	98 2f       	mov	r25, r24
				break;
		default:break;
		
	}
	return return_value;
}
 43a:	89 2f       	mov	r24, r25
 43c:	08 95       	ret

0000043e <DIO_vsetportdir>:
//direction port


void DIO_vsetportdir(unsigned char port,unsigned char direction){
	
	switch(port){
 43e:	84 34       	cpi	r24, 0x44	; 68
 440:	c9 f0       	breq	.+50     	; 0x474 <DIO_vsetportdir+0x36>
 442:	85 34       	cpi	r24, 0x45	; 69
 444:	38 f4       	brcc	.+14     	; 0x454 <DIO_vsetportdir+0x16>
 446:	82 34       	cpi	r24, 0x42	; 66
 448:	99 f0       	breq	.+38     	; 0x470 <DIO_vsetportdir+0x32>
 44a:	83 34       	cpi	r24, 0x43	; 67
 44c:	a8 f4       	brcc	.+42     	; 0x478 <DIO_vsetportdir+0x3a>
 44e:	81 34       	cpi	r24, 0x41	; 65
 450:	a1 f4       	brne	.+40     	; 0x47a <DIO_vsetportdir+0x3c>
 452:	0c c0       	rjmp	.+24     	; 0x46c <DIO_vsetportdir+0x2e>
 454:	82 36       	cpi	r24, 0x62	; 98
 456:	61 f0       	breq	.+24     	; 0x470 <DIO_vsetportdir+0x32>
 458:	83 36       	cpi	r24, 0x63	; 99
 45a:	18 f4       	brcc	.+6      	; 0x462 <DIO_vsetportdir+0x24>
 45c:	81 36       	cpi	r24, 0x61	; 97
 45e:	69 f4       	brne	.+26     	; 0x47a <DIO_vsetportdir+0x3c>
 460:	05 c0       	rjmp	.+10     	; 0x46c <DIO_vsetportdir+0x2e>
 462:	83 36       	cpi	r24, 0x63	; 99
 464:	49 f0       	breq	.+18     	; 0x478 <DIO_vsetportdir+0x3a>
 466:	84 36       	cpi	r24, 0x64	; 100
 468:	41 f4       	brne	.+16     	; 0x47a <DIO_vsetportdir+0x3c>
 46a:	04 c0       	rjmp	.+8      	; 0x474 <DIO_vsetportdir+0x36>
		
		case 'A':
		case 'a':
		DDRA=direction;//set the direction of port A
 46c:	6a bb       	out	0x1a, r22	; 26

		break;
 46e:	08 95       	ret
		
		case 'B':
		case 'b':	
			DDRB=direction;
 470:	67 bb       	out	0x17, r22	; 23

		break;
 472:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
 474:	61 bb       	out	0x11, r22	; 17
		
		
		break;
 476:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
 478:	64 bb       	out	0x14, r22	; 20
 47a:	08 95       	ret

0000047c <DIO_vWRITEport>:



void DIO_vWRITEport(unsigned char port,unsigned char val){
	
	switch(port){
 47c:	84 34       	cpi	r24, 0x44	; 68
 47e:	c9 f0       	breq	.+50     	; 0x4b2 <DIO_vWRITEport+0x36>
 480:	85 34       	cpi	r24, 0x45	; 69
 482:	38 f4       	brcc	.+14     	; 0x492 <DIO_vWRITEport+0x16>
 484:	82 34       	cpi	r24, 0x42	; 66
 486:	99 f0       	breq	.+38     	; 0x4ae <DIO_vWRITEport+0x32>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	a8 f4       	brcc	.+42     	; 0x4b6 <DIO_vWRITEport+0x3a>
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	a1 f4       	brne	.+40     	; 0x4b8 <DIO_vWRITEport+0x3c>
 490:	0c c0       	rjmp	.+24     	; 0x4aa <DIO_vWRITEport+0x2e>
 492:	82 36       	cpi	r24, 0x62	; 98
 494:	61 f0       	breq	.+24     	; 0x4ae <DIO_vWRITEport+0x32>
 496:	83 36       	cpi	r24, 0x63	; 99
 498:	18 f4       	brcc	.+6      	; 0x4a0 <DIO_vWRITEport+0x24>
 49a:	81 36       	cpi	r24, 0x61	; 97
 49c:	69 f4       	brne	.+26     	; 0x4b8 <DIO_vWRITEport+0x3c>
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <DIO_vWRITEport+0x2e>
 4a0:	83 36       	cpi	r24, 0x63	; 99
 4a2:	49 f0       	breq	.+18     	; 0x4b6 <DIO_vWRITEport+0x3a>
 4a4:	84 36       	cpi	r24, 0x64	; 100
 4a6:	41 f4       	brne	.+16     	; 0x4b8 <DIO_vWRITEport+0x3c>
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <DIO_vWRITEport+0x36>
		
		case 'A':
		case 'a':
		PORTA=val;//Write the given value to the port A
 4aa:	6b bb       	out	0x1b, r22	; 27

		break;
 4ac:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=val;//Write the given value to the port B
 4ae:	68 bb       	out	0x18, r22	; 24
	

		break;
 4b0:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=val;//Write the given value to the port D
 4b2:	62 bb       	out	0x12, r22	; 18
		
		break;
 4b4:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=val;//Write the given value to the port C
 4b6:	65 bb       	out	0x15, r22	; 21
 4b8:	08 95       	ret

000004ba <DIO_ureadport>:
	}
	
	
	unsigned char DIO_ureadport(unsigned char port){
		unsigned char return_val;
		switch(port){
 4ba:	84 34       	cpi	r24, 0x44	; 68
 4bc:	d1 f0       	breq	.+52     	; 0x4f2 <DIO_ureadport+0x38>
 4be:	85 34       	cpi	r24, 0x45	; 69
 4c0:	38 f4       	brcc	.+14     	; 0x4d0 <DIO_ureadport+0x16>
 4c2:	82 34       	cpi	r24, 0x42	; 66
 4c4:	99 f0       	breq	.+38     	; 0x4ec <DIO_ureadport+0x32>
 4c6:	83 34       	cpi	r24, 0x43	; 67
 4c8:	b8 f4       	brcc	.+46     	; 0x4f8 <DIO_ureadport+0x3e>
 4ca:	81 34       	cpi	r24, 0x41	; 65
 4cc:	b9 f4       	brne	.+46     	; 0x4fc <DIO_ureadport+0x42>
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <DIO_ureadport+0x2e>
 4d0:	82 36       	cpi	r24, 0x62	; 98
 4d2:	61 f0       	breq	.+24     	; 0x4ec <DIO_ureadport+0x32>
 4d4:	83 36       	cpi	r24, 0x63	; 99
 4d6:	18 f4       	brcc	.+6      	; 0x4de <DIO_ureadport+0x24>
 4d8:	81 36       	cpi	r24, 0x61	; 97
 4da:	81 f4       	brne	.+32     	; 0x4fc <DIO_ureadport+0x42>
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <DIO_ureadport+0x2e>
 4de:	83 36       	cpi	r24, 0x63	; 99
 4e0:	59 f0       	breq	.+22     	; 0x4f8 <DIO_ureadport+0x3e>
 4e2:	84 36       	cpi	r24, 0x64	; 100
 4e4:	59 f4       	brne	.+22     	; 0x4fc <DIO_ureadport+0x42>
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <DIO_ureadport+0x38>
			
			case 'A':
			case 'a':
			return_val=PINA;//read the value to the port A
 4e8:	99 b3       	in	r25, 0x19	; 25

			break;
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <DIO_ureadport+0x42>
			
			case 'B':
			case 'b':
			PORTB=PINB;//READ value to the port B
 4ec:	86 b3       	in	r24, 0x16	; 22
 4ee:	88 bb       	out	0x18, r24	; 24
			

			break;
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <DIO_ureadport+0x42>
			
			case 'D':
			case 'd':
			PORTD=PIND;//READ  value to the port D
 4f2:	80 b3       	in	r24, 0x10	; 16
 4f4:	82 bb       	out	0x12, r24	; 18
			
			break;
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_ureadport+0x42>
			
			case 'C':
			case 'c':
			PORTC=PINC;//READ  value to the port C
 4f8:	83 b3       	in	r24, 0x13	; 19
 4fa:	85 bb       	out	0x15, r24	; 21
			break;
			default:break;
		}			
			return return_val;

		}
 4fc:	89 2f       	mov	r24, r25
 4fe:	08 95       	ret

00000500 <DIO_vtoggleport>:
		
		
void DIO_vtoggleport(unsigned char port){
			
			switch(port){
 500:	84 34       	cpi	r24, 0x44	; 68
 502:	e9 f0       	breq	.+58     	; 0x53e <DIO_vtoggleport+0x3e>
 504:	85 34       	cpi	r24, 0x45	; 69
 506:	38 f4       	brcc	.+14     	; 0x516 <DIO_vtoggleport+0x16>
 508:	82 34       	cpi	r24, 0x42	; 66
 50a:	a9 f0       	breq	.+42     	; 0x536 <DIO_vtoggleport+0x36>
 50c:	83 34       	cpi	r24, 0x43	; 67
 50e:	d8 f4       	brcc	.+54     	; 0x546 <DIO_vtoggleport+0x46>
 510:	81 34       	cpi	r24, 0x41	; 65
 512:	e1 f4       	brne	.+56     	; 0x54c <DIO_vtoggleport+0x4c>
 514:	0c c0       	rjmp	.+24     	; 0x52e <DIO_vtoggleport+0x2e>
 516:	82 36       	cpi	r24, 0x62	; 98
 518:	71 f0       	breq	.+28     	; 0x536 <DIO_vtoggleport+0x36>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	18 f4       	brcc	.+6      	; 0x524 <DIO_vtoggleport+0x24>
 51e:	81 36       	cpi	r24, 0x61	; 97
 520:	a9 f4       	brne	.+42     	; 0x54c <DIO_vtoggleport+0x4c>
 522:	05 c0       	rjmp	.+10     	; 0x52e <DIO_vtoggleport+0x2e>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	79 f0       	breq	.+30     	; 0x546 <DIO_vtoggleport+0x46>
 528:	84 36       	cpi	r24, 0x64	; 100
 52a:	81 f4       	brne	.+32     	; 0x54c <DIO_vtoggleport+0x4c>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <DIO_vtoggleport+0x3e>
				
				case 'A':
				case 'a':
				PORTA=~PORTA;    // or PORTA=PORTA^0xff
 52e:	8b b3       	in	r24, 0x1b	; 27
 530:	80 95       	com	r24
 532:	8b bb       	out	0x1b, r24	; 27
				break;
 534:	08 95       	ret
				
				case 'B':
				case 'b':
				PORTB=~PORTB;//Write the given value to the port B
 536:	88 b3       	in	r24, 0x18	; 24
 538:	80 95       	com	r24
 53a:	88 bb       	out	0x18, r24	; 24
				

				break;
 53c:	08 95       	ret
				
				case 'D':
				case 'd':
				PORTD=~PORTD;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	80 95       	com	r24
 542:	82 bb       	out	0x12, r24	; 18
				
				break;
 544:	08 95       	ret
				
				case 'C':
				case 'c':
				PORTC=~PORTC;
 546:	85 b3       	in	r24, 0x15	; 21
 548:	80 95       	com	r24
 54a:	85 bb       	out	0x15, r24	; 21
 54c:	08 95       	ret

0000054e <DIO_vconnectpullup>:
or

 */
void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 54e:	82 34       	cpi	r24, 0x42	; 66
 550:	51 f1       	breq	.+84     	; 0x5a6 <DIO_vconnectpullup+0x58>
 552:	83 34       	cpi	r24, 0x43	; 67
 554:	20 f4       	brcc	.+8      	; 0x55e <DIO_vconnectpullup+0x10>
 556:	81 34       	cpi	r24, 0x41	; 65
 558:	09 f0       	breq	.+2      	; 0x55c <DIO_vconnectpullup+0xe>
 55a:	7b c0       	rjmp	.+246    	; 0x652 <DIO_vconnectpullup+0x104>
 55c:	07 c0       	rjmp	.+14     	; 0x56c <DIO_vconnectpullup+0x1e>
 55e:	83 34       	cpi	r24, 0x43	; 67
 560:	09 f4       	brne	.+2      	; 0x564 <DIO_vconnectpullup+0x16>
 562:	3e c0       	rjmp	.+124    	; 0x5e0 <DIO_vconnectpullup+0x92>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	09 f0       	breq	.+2      	; 0x56a <DIO_vconnectpullup+0x1c>
 568:	74 c0       	rjmp	.+232    	; 0x652 <DIO_vconnectpullup+0x104>
 56a:	57 c0       	rjmp	.+174    	; 0x61a <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 56c:	41 30       	cpi	r20, 0x01	; 1
 56e:	69 f4       	brne	.+26     	; 0x58a <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 570:	2b b3       	in	r18, 0x1b	; 27
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	ac 01       	movw	r20, r24
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_vconnectpullup+0x30>
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_vconnectpullup+0x2c>
 582:	ba 01       	movw	r22, r20
 584:	62 2b       	or	r22, r18
 586:	6b bb       	out	0x1b, r22	; 27
 588:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 58a:	2b b3       	in	r18, 0x1b	; 27
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	ac 01       	movw	r20, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vconnectpullup+0x4a>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vconnectpullup+0x46>
 59c:	ba 01       	movw	r22, r20
 59e:	60 95       	com	r22
 5a0:	62 23       	and	r22, r18
 5a2:	6b bb       	out	0x1b, r22	; 27
 5a4:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 5a6:	41 30       	cpi	r20, 0x01	; 1
 5a8:	69 f4       	brne	.+26     	; 0x5c4 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 5aa:	28 b3       	in	r18, 0x18	; 24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	ac 01       	movw	r20, r24
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_vconnectpullup+0x6a>
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_vconnectpullup+0x66>
 5bc:	ba 01       	movw	r22, r20
 5be:	62 2b       	or	r22, r18
 5c0:	68 bb       	out	0x18, r22	; 24
 5c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 5c4:	28 b3       	in	r18, 0x18	; 24
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	ac 01       	movw	r20, r24
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vconnectpullup+0x84>
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vconnectpullup+0x80>
 5d6:	ba 01       	movw	r22, r20
 5d8:	60 95       	com	r22
 5da:	62 23       	and	r22, r18
 5dc:	68 bb       	out	0x18, r22	; 24
 5de:	08 95       	ret
		}
		break;
	case 'C':
	if(connect_pullup==1)
 5e0:	41 30       	cpi	r20, 0x01	; 1
 5e2:	69 f4       	brne	.+26     	; 0x5fe <DIO_vconnectpullup+0xb0>
	{
		SET_BIT(PORTC,pinnumber);
 5e4:	25 b3       	in	r18, 0x15	; 21
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	ac 01       	movw	r20, r24
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vconnectpullup+0xa4>
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vconnectpullup+0xa0>
 5f6:	ba 01       	movw	r22, r20
 5f8:	62 2b       	or	r22, r18
 5fa:	65 bb       	out	0x15, r22	; 21
 5fc:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTC,pinnumber);
 5fe:	25 b3       	in	r18, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ac 01       	movw	r20, r24
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vconnectpullup+0xbe>
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vconnectpullup+0xba>
 610:	ba 01       	movw	r22, r20
 612:	60 95       	com	r22
 614:	62 23       	and	r22, r18
 616:	65 bb       	out	0x15, r22	; 21
 618:	08 95       	ret
	}
	break;
	case 'D':
	if(connect_pullup==1)
 61a:	41 30       	cpi	r20, 0x01	; 1
 61c:	69 f4       	brne	.+26     	; 0x638 <DIO_vconnectpullup+0xea>
	{
		SET_BIT(PORTD,pinnumber);
 61e:	22 b3       	in	r18, 0x12	; 18
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	ac 01       	movw	r20, r24
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_vconnectpullup+0xde>
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_vconnectpullup+0xda>
 630:	ba 01       	movw	r22, r20
 632:	62 2b       	or	r22, r18
 634:	62 bb       	out	0x12, r22	; 18
 636:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTD,pinnumber);
 638:	22 b3       	in	r18, 0x12	; 18
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	ac 01       	movw	r20, r24
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_vconnectpullup+0xf8>
 642:	44 0f       	add	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_vconnectpullup+0xf4>
 64a:	ba 01       	movw	r22, r20
 64c:	60 95       	com	r22
 64e:	62 23       	and	r22, r18
 650:	62 bb       	out	0x12, r22	; 18
 652:	08 95       	ret

00000654 <write_low_nibble>:
}

	//We will increase  these two functions in DIO.c
	void write_low_nibble(unsigned char portname,unsigned char value)
	{
		value&=0x0f;
 654:	6f 70       	andi	r22, 0x0F	; 15
		switch(portname)
 656:	82 34       	cpi	r24, 0x42	; 66
 658:	89 f0       	breq	.+34     	; 0x67c <write_low_nibble+0x28>
 65a:	83 34       	cpi	r24, 0x43	; 67
 65c:	18 f4       	brcc	.+6      	; 0x664 <write_low_nibble+0x10>
 65e:	81 34       	cpi	r24, 0x41	; 65
 660:	09 f5       	brne	.+66     	; 0x6a4 <write_low_nibble+0x50>
 662:	05 c0       	rjmp	.+10     	; 0x66e <write_low_nibble+0x1a>
 664:	83 34       	cpi	r24, 0x43	; 67
 666:	89 f0       	breq	.+34     	; 0x68a <write_low_nibble+0x36>
 668:	84 34       	cpi	r24, 0x44	; 68
 66a:	e1 f4       	brne	.+56     	; 0x6a4 <write_low_nibble+0x50>
 66c:	15 c0       	rjmp	.+42     	; 0x698 <write_low_nibble+0x44>
		{
			case 'A':
			PORTA&=0xf0;// 0b11110000
 66e:	8b b3       	in	r24, 0x1b	; 27
 670:	80 7f       	andi	r24, 0xF0	; 240
 672:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 674:	8b b3       	in	r24, 0x1b	; 27
 676:	68 2b       	or	r22, r24
 678:	6b bb       	out	0x1b, r22	; 27
			break;
 67a:	08 95       	ret
			case 'B':
			PORTB&=0xf0;
 67c:	88 b3       	in	r24, 0x18	; 24
 67e:	80 7f       	andi	r24, 0xF0	; 240
 680:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 682:	88 b3       	in	r24, 0x18	; 24
 684:	68 2b       	or	r22, r24
 686:	68 bb       	out	0x18, r22	; 24
			break;
 688:	08 95       	ret
case 'C':
PORTC&=0xf0;
 68a:	85 b3       	in	r24, 0x15	; 21
 68c:	80 7f       	andi	r24, 0xF0	; 240
 68e:	85 bb       	out	0x15, r24	; 21
PORTC|=value;
 690:	85 b3       	in	r24, 0x15	; 21
 692:	68 2b       	or	r22, r24
 694:	65 bb       	out	0x15, r22	; 21
break;
 696:	08 95       	ret
case 'D':
PORTD&=0xf0;
 698:	82 b3       	in	r24, 0x12	; 18
 69a:	80 7f       	andi	r24, 0xF0	; 240
 69c:	82 bb       	out	0x12, r24	; 18
PORTD|=value;
 69e:	82 b3       	in	r24, 0x12	; 18
 6a0:	68 2b       	or	r22, r24
 6a2:	62 bb       	out	0x12, r22	; 18
 6a4:	08 95       	ret

000006a6 <write_high_nibble>:
}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 6a6:	62 95       	swap	r22
 6a8:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6aa:	82 34       	cpi	r24, 0x42	; 66
 6ac:	89 f0       	breq	.+34     	; 0x6d0 <write_high_nibble+0x2a>
 6ae:	83 34       	cpi	r24, 0x43	; 67
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <write_high_nibble+0x12>
 6b2:	81 34       	cpi	r24, 0x41	; 65
 6b4:	09 f5       	brne	.+66     	; 0x6f8 <write_high_nibble+0x52>
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <write_high_nibble+0x1c>
 6b8:	83 34       	cpi	r24, 0x43	; 67
 6ba:	89 f0       	breq	.+34     	; 0x6de <write_high_nibble+0x38>
 6bc:	84 34       	cpi	r24, 0x44	; 68
 6be:	e1 f4       	brne	.+56     	; 0x6f8 <write_high_nibble+0x52>
 6c0:	15 c0       	rjmp	.+42     	; 0x6ec <write_high_nibble+0x46>
	{
		case 'A':
		PORTA&=0x0f;
 6c2:	8b b3       	in	r24, 0x1b	; 27
 6c4:	8f 70       	andi	r24, 0x0F	; 15
 6c6:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 6c8:	8b b3       	in	r24, 0x1b	; 27
 6ca:	68 2b       	or	r22, r24
 6cc:	6b bb       	out	0x1b, r22	; 27
		break;
 6ce:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 6d0:	88 b3       	in	r24, 0x18	; 24
 6d2:	8f 70       	andi	r24, 0x0F	; 15
 6d4:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 6d6:	88 b3       	in	r24, 0x18	; 24
 6d8:	68 2b       	or	r22, r24
 6da:	68 bb       	out	0x18, r22	; 24
		break;
 6dc:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 6de:	85 b3       	in	r24, 0x15	; 21
 6e0:	8f 70       	andi	r24, 0x0F	; 15
 6e2:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 6e4:	85 b3       	in	r24, 0x15	; 21
 6e6:	68 2b       	or	r22, r24
 6e8:	65 bb       	out	0x15, r22	; 21
		break;
 6ea:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 6ec:	82 b3       	in	r24, 0x12	; 18
 6ee:	8f 70       	andi	r24, 0x0F	; 15
 6f0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 6f2:	82 b3       	in	r24, 0x12	; 18
 6f4:	68 2b       	or	r22, r24
 6f6:	62 bb       	out	0x12, r22	; 18
 6f8:	08 95       	ret

000006fa <motor_vinti>:

#include "direction_speed.h"


void motor_vinti(){
DDRB=0XFF;//output motor  left
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	87 bb       	out	0x17, r24	; 23

DDRA=0XFF;// motor output right
 6fe:	8a bb       	out	0x1a, r24	; 26
*/

//L293D Pin 1 -> En1 -> motor 1


}
 700:	08 95       	ret

00000702 <PWM_init>:
	
	
	// Function to initialize PWM
	void PWM_init() {
		// Set PWM pins as output
		DDRB |= (1 << MOTOR_1_PIN);
 702:	bb 9a       	sbi	0x17, 3	; 23
		DDRD |= (1 << MOTOR_2_PIN) | (1 << MOTOR_3_PIN) | (1 << MOTOR_4_PIN);
 704:	81 b3       	in	r24, 0x11	; 17
 706:	80 6b       	ori	r24, 0xB0	; 176
 708:	81 bb       	out	0x11, r24	; 17
		
		// Configure Timer0 for PWM (Motor 1)
		TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
 70a:	8a e6       	ldi	r24, 0x6A	; 106
 70c:	83 bf       	out	0x33, r24	; 51
		
		// Configure Timer2 for PWM (Motor 2)
		TCCR2 = (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS21);
 70e:	85 bd       	out	0x25, r24	; 37
		
		

		
		// Configure Timer1 for PWM (Motor 3 and 4)
		TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 710:	81 ea       	ldi	r24, 0xA1	; 161
 712:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1 << WGM12) | (1 << CS11);
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	8e bd       	out	0x2e, r24	; 46
	}
 718:	08 95       	ret

0000071a <set_motor_speed>:

	// Function to set motor speed (0-255)
	void set_motor_speed(unsigned char motor, unsigned char speed) {
		switch(motor) {
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	61 f0       	breq	.+24     	; 0x736 <set_motor_speed+0x1c>
 71e:	83 30       	cpi	r24, 0x03	; 3
 720:	18 f4       	brcc	.+6      	; 0x728 <set_motor_speed+0xe>
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	89 f4       	brne	.+34     	; 0x748 <set_motor_speed+0x2e>
 726:	05 c0       	rjmp	.+10     	; 0x732 <set_motor_speed+0x18>
 728:	83 30       	cpi	r24, 0x03	; 3
 72a:	39 f0       	breq	.+14     	; 0x73a <set_motor_speed+0x20>
 72c:	84 30       	cpi	r24, 0x04	; 4
 72e:	61 f4       	brne	.+24     	; 0x748 <set_motor_speed+0x2e>
 730:	08 c0       	rjmp	.+16     	; 0x742 <set_motor_speed+0x28>
			case 1:
			OCR0 = speed;
 732:	6c bf       	out	0x3c, r22	; 60
			break;
 734:	08 95       	ret
			case 2:
			OCR2 = speed;
 736:	63 bd       	out	0x23, r22	; 35
			break;
 738:	08 95       	ret
			case 3:
			OCR1B = speed;
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	79 bd       	out	0x29, r23	; 41
 73e:	68 bd       	out	0x28, r22	; 40
			break;
 740:	08 95       	ret
			case 4:
			OCR1A = speed;
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	7b bd       	out	0x2b, r23	; 43
 746:	6a bd       	out	0x2a, r22	; 42
 748:	08 95       	ret

0000074a <left_backword>:
	DIO_vwrite('A',5,0);
		
		
	}
	
	void left_backword(int speed2){
 74a:	cf 93       	push	r28
		
		
		// left ROTAT MOTOR ANTI-CLOCKWISE
		
		set_motor_speed(3,speed2*.92);
 74c:	9c 01       	movw	r18, r24
 74e:	b9 01       	movw	r22, r18
 750:	88 27       	eor	r24, r24
 752:	77 fd       	sbrc	r23, 7
 754:	80 95       	com	r24
 756:	98 2f       	mov	r25, r24
 758:	0e 94 39 05 	call	0xa72	; 0xa72 <__floatsisf>
 75c:	2f e1       	ldi	r18, 0x1F	; 31
 75e:	35 e8       	ldi	r19, 0x85	; 133
 760:	4b e6       	ldi	r20, 0x6B	; 107
 762:	5f e3       	ldi	r21, 0x3F	; 63
 764:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__mulsf3>
 768:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixunssfsi>
 76c:	c6 2f       	mov	r28, r22
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	6c 2f       	mov	r22, r28
 772:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
		set_motor_speed(4,speed2*.92);
 776:	84 e0       	ldi	r24, 0x04	; 4
 778:	6c 2f       	mov	r22, r28
 77a:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
		
		DIO_vwrite('B',0,0);
 77e:	82 e4       	ldi	r24, 0x42	; 66
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		DIO_vwrite('B',1,1);
 788:	82 e4       	ldi	r24, 0x42	; 66
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	41 e0       	ldi	r20, 0x01	; 1
 78e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		DIO_vwrite('B',4,1);
 792:	82 e4       	ldi	r24, 0x42	; 66
 794:	64 e0       	ldi	r22, 0x04	; 4
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		DIO_vwrite('B',5,0);
 79c:	82 e4       	ldi	r24, 0x42	; 66
 79e:	65 e0       	ldi	r22, 0x05	; 5
 7a0:	40 e0       	ldi	r20, 0x00	; 0
 7a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		
		
	}
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <right_backword>:

		
	}


	void right_backword(int speed2){
 7aa:	cf 93       	push	r28
 7ac:	c8 2f       	mov	r28, r24
		
		// left ROTAT MOTOR1-2 ANTI-CLOCKWISE
		
	set_motor_speed(1,speed2);
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	6c 2f       	mov	r22, r28
 7b2:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
	set_motor_speed(2,speed2);
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	6c 2f       	mov	r22, r28
 7ba:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
	
	DIO_vwrite('A',0,0);
 7be:	81 e4       	ldi	r24, 0x41	; 65
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('A',1,1);
 7c8:	81 e4       	ldi	r24, 0x41	; 65
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('A',4,1);
 7d2:	81 e4       	ldi	r24, 0x41	; 65
 7d4:	64 e0       	ldi	r22, 0x04	; 4
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('A',5,0);
 7dc:	81 e4       	ldi	r24, 0x41	; 65
 7de:	65 e0       	ldi	r22, 0x05	; 5
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		
		
	}
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <motor_backword>:
		DIO_vwrite('B',5,0);
		
		
	}
	
		void motor_backword(int speed2){
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	ec 01       	movw	r28, r24
			
			left_backword(speed2);
 7f0:	0e 94 a5 03 	call	0x74a	; 0x74a <left_backword>
			right_backword(speed2);
 7f4:	ce 01       	movw	r24, r28
 7f6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <right_backword>
	
			
		}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <right_forword>:
	DIO_vwrite('B',4,0);
	DIO_vwrite('B',5,1);
}


	void right_forword(int speed){
 800:	cf 93       	push	r28
 802:	c8 2f       	mov	r28, r24
		//right ROTAT MOTOR 1-2 CLOCKWISE
		set_motor_speed(1,speed);
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	6c 2f       	mov	r22, r28
 808:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
		set_motor_speed(2,speed);
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	6c 2f       	mov	r22, r28
 810:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
	
		DIO_vwrite('A',0,1);
 814:	81 e4       	ldi	r24, 0x41	; 65
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		DIO_vwrite('A',1,0);
 81e:	81 e4       	ldi	r24, 0x41	; 65
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('A',4,0);
 828:	81 e4       	ldi	r24, 0x41	; 65
 82a:	64 e0       	ldi	r22, 0x04	; 4
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('A',5,1);
 832:	81 e4       	ldi	r24, 0x41	; 65
 834:	65 e0       	ldi	r22, 0x05	; 5
 836:	41 e0       	ldi	r20, 0x01	; 1
 838:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		
	}
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <turn_left>:
		left_forword(right);
		right_backword(right);
		
	}
	
	void turn_left(int left){
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	ec 01       	movw	r28, r24
		left_backword(left);
 846:	0e 94 a5 03 	call	0x74a	; 0x74a <left_backword>
		right_forword(left);
 84a:	ce 01       	movw	r24, r28
 84c:	0e 94 00 04 	call	0x800	; 0x800 <right_forword>
	}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <left_forword>:

}

		

void left_forword(int speed){
 856:	cf 93       	push	r28
	//left ROTAT MOTOR3-4 CLOCKWISE

	set_motor_speed(3,speed* 0.92);
 858:	9c 01       	movw	r18, r24
 85a:	b9 01       	movw	r22, r18
 85c:	88 27       	eor	r24, r24
 85e:	77 fd       	sbrc	r23, 7
 860:	80 95       	com	r24
 862:	98 2f       	mov	r25, r24
 864:	0e 94 39 05 	call	0xa72	; 0xa72 <__floatsisf>
 868:	2f e1       	ldi	r18, 0x1F	; 31
 86a:	35 e8       	ldi	r19, 0x85	; 133
 86c:	4b e6       	ldi	r20, 0x6B	; 107
 86e:	5f e3       	ldi	r21, 0x3F	; 63
 870:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__mulsf3>
 874:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixunssfsi>
 878:	c6 2f       	mov	r28, r22
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	6c 2f       	mov	r22, r28
 87e:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
	set_motor_speed(4,speed* 0.92);
 882:	84 e0       	ldi	r24, 0x04	; 4
 884:	6c 2f       	mov	r22, r28
 886:	0e 94 8d 03 	call	0x71a	; 0x71a <set_motor_speed>
	
	DIO_vwrite('B',0,1);
 88a:	82 e4       	ldi	r24, 0x42	; 66
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	41 e0       	ldi	r20, 0x01	; 1
 890:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('B',1,0);
 894:	82 e4       	ldi	r24, 0x42	; 66
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('B',4,0);
 89e:	82 e4       	ldi	r24, 0x42	; 66
 8a0:	64 e0       	ldi	r22, 0x04	; 4
 8a2:	40 e0       	ldi	r20, 0x00	; 0
 8a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('B',5,1);
 8a8:	82 e4       	ldi	r24, 0x42	; 66
 8aa:	65 e0       	ldi	r22, 0x05	; 5
 8ac:	41 e0       	ldi	r20, 0x01	; 1
 8ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
}
 8b2:	cf 91       	pop	r28
 8b4:	08 95       	ret

000008b6 <stop_motor>:
		right_forword(left);
	}
	
	void stop_motor(){
		
		left_forword(0);
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 2b 04 	call	0x856	; 0x856 <left_forword>
		right_forword(0);
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 00 04 	call	0x800	; 0x800 <right_forword>
	}
 8c6:	08 95       	ret

000008c8 <turn_right>:
	
			
		}
		
	
	void turn_right(int right){
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
 8cc:	ec 01       	movw	r28, r24
		left_forword(right);
 8ce:	0e 94 2b 04 	call	0x856	; 0x856 <left_forword>
		right_backword(right);
 8d2:	ce 01       	movw	r24, r28
 8d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <right_backword>
		
	}
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	08 95       	ret

000008de <motor_forword>:
	DIO_vwrite('A',4,0);
	DIO_vwrite('A',5,1);
		
	}

	void motor_forword(int speed){
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	ec 01       	movw	r28, r24
		
		left_forword(speed);
 8e4:	0e 94 2b 04 	call	0x856	; 0x856 <left_forword>
		right_forword(speed);
 8e8:	ce 01       	movw	r24, r28
 8ea:	0e 94 00 04 	call	0x800	; 0x800 <right_forword>

		
	}
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	08 95       	ret

000008f4 <turn_right_slow>:
		}
	}
	
	

void turn_right_slow(int rslow){
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	d8 2f       	mov	r29, r24
 8fa:	c9 2f       	mov	r28, r25

	right_forword(rslow/2);
 8fc:	28 2f       	mov	r18, r24
 8fe:	39 2f       	mov	r19, r25
 900:	33 23       	and	r19, r19
 902:	14 f4       	brge	.+4      	; 0x908 <turn_right_slow+0x14>
 904:	2f 5f       	subi	r18, 0xFF	; 255
 906:	3f 4f       	sbci	r19, 0xFF	; 255
 908:	c9 01       	movw	r24, r18
 90a:	95 95       	asr	r25
 90c:	87 95       	ror	r24
 90e:	0e 94 00 04 	call	0x800	; 0x800 <right_forword>
	left_forword(rslow);
 912:	8d 2f       	mov	r24, r29
 914:	9c 2f       	mov	r25, r28
 916:	0e 94 2b 04 	call	0x856	; 0x856 <left_forword>
	
	
}
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	08 95       	ret

00000920 <turn_left_slow>:

void turn_left_slow(int slow){
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	d8 2f       	mov	r29, r24
 926:	c9 2f       	mov	r28, r25
	
	left_forword(slow/2);
 928:	28 2f       	mov	r18, r24
 92a:	39 2f       	mov	r19, r25
 92c:	33 23       	and	r19, r19
 92e:	14 f4       	brge	.+4      	; 0x934 <turn_left_slow+0x14>
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	c9 01       	movw	r24, r18
 936:	95 95       	asr	r25
 938:	87 95       	ror	r24
 93a:	0e 94 2b 04 	call	0x856	; 0x856 <left_forword>
	right_forword(slow);
 93e:	8d 2f       	mov	r24, r29
 940:	9c 2f       	mov	r25, r28
 942:	0e 94 00 04 	call	0x800	; 0x800 <right_forword>
}
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	08 95       	ret

0000094c <main>:
#include "direction_speed.h"
volatile int ir_sensor_right;
volatile   int ir_sensor_left;
int main(void)
{
	motor_vinti();
 94c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <motor_vinti>
	PWM_init();
 950:	0e 94 81 03 	call	0x702	; 0x702 <PWM_init>
	
	
	//input
	DIO_vsetpindir('D',0,0);//ir_sensor_right
 954:	84 e4       	ldi	r24, 0x44	; 68
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	40 e0       	ldi	r20, 0x00	; 0
 95a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('D',1,0);//ir_sensor_left
 95e:	84 e4       	ldi	r24, 0x44	; 68
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	40 e0       	ldi	r20, 0x00	; 0
 964:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	
    while(1)
    {
        //TODO:: Please write your application code 
		
		ir_sensor_right=DIO_uread('D',0);
 968:	84 e4       	ldi	r24, 0x44	; 68
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	0e 94 b7 01 	call	0x36e	; 0x36e <DIO_uread>
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	90 93 63 00 	sts	0x0063, r25
 976:	80 93 62 00 	sts	0x0062, r24
		 ir_sensor_left=DIO_uread('D',1);
 97a:	84 e4       	ldi	r24, 0x44	; 68
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	0e 94 b7 01 	call	0x36e	; 0x36e <DIO_uread>
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	90 93 61 00 	sts	0x0061, r25
 988:	80 93 60 00 	sts	0x0060, r24
	

		////if Right Sensor and Left Sensor are at block color then it will call forword function
		
		if (ir_sensor_right==1 && ir_sensor_left==1){
 98c:	80 91 62 00 	lds	r24, 0x0062
 990:	90 91 63 00 	lds	r25, 0x0063
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	91 05       	cpc	r25, r1
 998:	59 f4       	brne	.+22     	; 0x9b0 <main+0x64>
 99a:	80 91 60 00 	lds	r24, 0x0060
 99e:	90 91 61 00 	lds	r25, 0x0061
 9a2:	81 30       	cpi	r24, 0x01	; 1
 9a4:	91 05       	cpc	r25, r1
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <main+0x64>
			motor_forword(70);
 9a8:	86 e4       	ldi	r24, 0x46	; 70
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 6f 04 	call	0x8de	; 0x8de <motor_forword>
		
		
		
		//if Right Sensor is White and Left Sensor is Black then it will call turn Left function
		
		if (ir_sensor_right==0 && ir_sensor_left==1){
 9b0:	80 91 62 00 	lds	r24, 0x0062
 9b4:	90 91 63 00 	lds	r25, 0x0063
 9b8:	00 97       	sbiw	r24, 0x00	; 0
 9ba:	59 f4       	brne	.+22     	; 0x9d2 <main+0x86>
 9bc:	80 91 60 00 	lds	r24, 0x0060
 9c0:	90 91 61 00 	lds	r25, 0x0061
 9c4:	81 30       	cpi	r24, 0x01	; 1
 9c6:	91 05       	cpc	r25, r1
 9c8:	21 f4       	brne	.+8      	; 0x9d2 <main+0x86>
			turn_left_slow(120);
 9ca:	88 e7       	ldi	r24, 0x78	; 120
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 90 04 	call	0x920	; 0x920 <turn_left_slow>
			
		}
		//if Right Sensor is black and Left Sensor is white then it will call turn Left function
		if (ir_sensor_right==1 && ir_sensor_left==0){
 9d2:	80 91 62 00 	lds	r24, 0x0062
 9d6:	90 91 63 00 	lds	r25, 0x0063
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	91 05       	cpc	r25, r1
 9de:	51 f4       	brne	.+20     	; 0x9f4 <main+0xa8>
 9e0:	80 91 60 00 	lds	r24, 0x0060
 9e4:	90 91 61 00 	lds	r25, 0x0061
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <main+0xa8>
			turn_right_slow(120);
 9ec:	88 e7       	ldi	r24, 0x78	; 120
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <turn_right_slow>
			
			
		}
		
		//if Right Sensor and Left Sensor are at white color then it will call Stop function
		if (ir_sensor_right==0 && ir_sensor_left==0)
 9f4:	80 91 62 00 	lds	r24, 0x0062
 9f8:	90 91 63 00 	lds	r25, 0x0063
 9fc:	00 97       	sbiw	r24, 0x00	; 0
 9fe:	09 f0       	breq	.+2      	; 0xa02 <main+0xb6>
 a00:	b3 cf       	rjmp	.-154    	; 0x968 <main+0x1c>
 a02:	80 91 60 00 	lds	r24, 0x0060
 a06:	90 91 61 00 	lds	r25, 0x0061
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	09 f0       	breq	.+2      	; 0xa10 <main+0xc4>
 a0e:	ac cf       	rjmp	.-168    	; 0x968 <main+0x1c>
		{
			stop_motor();
 a10:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <stop_motor>
 a14:	a9 cf       	rjmp	.-174    	; 0x968 <main+0x1c>

00000a16 <__fixunssfsi>:
 a16:	70 d0       	rcall	.+224    	; 0xaf8 <__fp_splitA>
 a18:	88 f0       	brcs	.+34     	; 0xa3c <__fixunssfsi+0x26>
 a1a:	9f 57       	subi	r25, 0x7F	; 127
 a1c:	90 f0       	brcs	.+36     	; 0xa42 <__fixunssfsi+0x2c>
 a1e:	b9 2f       	mov	r27, r25
 a20:	99 27       	eor	r25, r25
 a22:	b7 51       	subi	r27, 0x17	; 23
 a24:	a0 f0       	brcs	.+40     	; 0xa4e <__fixunssfsi+0x38>
 a26:	d1 f0       	breq	.+52     	; 0xa5c <__fixunssfsi+0x46>
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	1a f0       	brmi	.+6      	; 0xa38 <__fixunssfsi+0x22>
 a32:	ba 95       	dec	r27
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__fixunssfsi+0x12>
 a36:	12 c0       	rjmp	.+36     	; 0xa5c <__fixunssfsi+0x46>
 a38:	b1 30       	cpi	r27, 0x01	; 1
 a3a:	81 f0       	breq	.+32     	; 0xa5c <__fixunssfsi+0x46>
 a3c:	77 d0       	rcall	.+238    	; 0xb2c <__fp_zero>
 a3e:	b1 e0       	ldi	r27, 0x01	; 1
 a40:	08 95       	ret
 a42:	74 c0       	rjmp	.+232    	; 0xb2c <__fp_zero>
 a44:	67 2f       	mov	r22, r23
 a46:	78 2f       	mov	r23, r24
 a48:	88 27       	eor	r24, r24
 a4a:	b8 5f       	subi	r27, 0xF8	; 248
 a4c:	39 f0       	breq	.+14     	; 0xa5c <__fixunssfsi+0x46>
 a4e:	b9 3f       	cpi	r27, 0xF9	; 249
 a50:	cc f3       	brlt	.-14     	; 0xa44 <__fixunssfsi+0x2e>
 a52:	86 95       	lsr	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	b3 95       	inc	r27
 a5a:	d9 f7       	brne	.-10     	; 0xa52 <__fixunssfsi+0x3c>
 a5c:	3e f4       	brtc	.+14     	; 0xa6c <__fixunssfsi+0x56>
 a5e:	90 95       	com	r25
 a60:	80 95       	com	r24
 a62:	70 95       	com	r23
 a64:	61 95       	neg	r22
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	8f 4f       	sbci	r24, 0xFF	; 255
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	08 95       	ret

00000a6e <__floatunsisf>:
 a6e:	e8 94       	clt
 a70:	09 c0       	rjmp	.+18     	; 0xa84 <__floatsisf+0x12>

00000a72 <__floatsisf>:
 a72:	97 fb       	bst	r25, 7
 a74:	3e f4       	brtc	.+14     	; 0xa84 <__floatsisf+0x12>
 a76:	90 95       	com	r25
 a78:	80 95       	com	r24
 a7a:	70 95       	com	r23
 a7c:	61 95       	neg	r22
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	99 23       	and	r25, r25
 a86:	a9 f0       	breq	.+42     	; 0xab2 <__floatsisf+0x40>
 a88:	f9 2f       	mov	r31, r25
 a8a:	96 e9       	ldi	r25, 0x96	; 150
 a8c:	bb 27       	eor	r27, r27
 a8e:	93 95       	inc	r25
 a90:	f6 95       	lsr	r31
 a92:	87 95       	ror	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b7 95       	ror	r27
 a9a:	f1 11       	cpse	r31, r1
 a9c:	f8 cf       	rjmp	.-16     	; 0xa8e <__floatsisf+0x1c>
 a9e:	fa f4       	brpl	.+62     	; 0xade <__floatsisf+0x6c>
 aa0:	bb 0f       	add	r27, r27
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__floatsisf+0x36>
 aa4:	60 ff       	sbrs	r22, 0
 aa6:	1b c0       	rjmp	.+54     	; 0xade <__floatsisf+0x6c>
 aa8:	6f 5f       	subi	r22, 0xFF	; 255
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	16 c0       	rjmp	.+44     	; 0xade <__floatsisf+0x6c>
 ab2:	88 23       	and	r24, r24
 ab4:	11 f0       	breq	.+4      	; 0xaba <__floatsisf+0x48>
 ab6:	96 e9       	ldi	r25, 0x96	; 150
 ab8:	11 c0       	rjmp	.+34     	; 0xadc <__floatsisf+0x6a>
 aba:	77 23       	and	r23, r23
 abc:	21 f0       	breq	.+8      	; 0xac6 <__floatsisf+0x54>
 abe:	9e e8       	ldi	r25, 0x8E	; 142
 ac0:	87 2f       	mov	r24, r23
 ac2:	76 2f       	mov	r23, r22
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__floatsisf+0x5e>
 ac6:	66 23       	and	r22, r22
 ac8:	71 f0       	breq	.+28     	; 0xae6 <__floatsisf+0x74>
 aca:	96 e8       	ldi	r25, 0x86	; 134
 acc:	86 2f       	mov	r24, r22
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	60 e0       	ldi	r22, 0x00	; 0
 ad2:	2a f0       	brmi	.+10     	; 0xade <__floatsisf+0x6c>
 ad4:	9a 95       	dec	r25
 ad6:	66 0f       	add	r22, r22
 ad8:	77 1f       	adc	r23, r23
 ada:	88 1f       	adc	r24, r24
 adc:	da f7       	brpl	.-10     	; 0xad4 <__floatsisf+0x62>
 ade:	88 0f       	add	r24, r24
 ae0:	96 95       	lsr	r25
 ae2:	87 95       	ror	r24
 ae4:	97 f9       	bld	r25, 7
 ae6:	08 95       	ret

00000ae8 <__fp_split3>:
 ae8:	57 fd       	sbrc	r21, 7
 aea:	90 58       	subi	r25, 0x80	; 128
 aec:	44 0f       	add	r20, r20
 aee:	55 1f       	adc	r21, r21
 af0:	59 f0       	breq	.+22     	; 0xb08 <__fp_splitA+0x10>
 af2:	5f 3f       	cpi	r21, 0xFF	; 255
 af4:	71 f0       	breq	.+28     	; 0xb12 <__fp_splitA+0x1a>
 af6:	47 95       	ror	r20

00000af8 <__fp_splitA>:
 af8:	88 0f       	add	r24, r24
 afa:	97 fb       	bst	r25, 7
 afc:	99 1f       	adc	r25, r25
 afe:	61 f0       	breq	.+24     	; 0xb18 <__fp_splitA+0x20>
 b00:	9f 3f       	cpi	r25, 0xFF	; 255
 b02:	79 f0       	breq	.+30     	; 0xb22 <__fp_splitA+0x2a>
 b04:	87 95       	ror	r24
 b06:	08 95       	ret
 b08:	12 16       	cp	r1, r18
 b0a:	13 06       	cpc	r1, r19
 b0c:	14 06       	cpc	r1, r20
 b0e:	55 1f       	adc	r21, r21
 b10:	f2 cf       	rjmp	.-28     	; 0xaf6 <__fp_split3+0xe>
 b12:	46 95       	lsr	r20
 b14:	f1 df       	rcall	.-30     	; 0xaf8 <__fp_splitA>
 b16:	08 c0       	rjmp	.+16     	; 0xb28 <__fp_splitA+0x30>
 b18:	16 16       	cp	r1, r22
 b1a:	17 06       	cpc	r1, r23
 b1c:	18 06       	cpc	r1, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	f1 cf       	rjmp	.-30     	; 0xb04 <__fp_splitA+0xc>
 b22:	86 95       	lsr	r24
 b24:	71 05       	cpc	r23, r1
 b26:	61 05       	cpc	r22, r1
 b28:	08 94       	sec
 b2a:	08 95       	ret

00000b2c <__fp_zero>:
 b2c:	e8 94       	clt

00000b2e <__fp_szero>:
 b2e:	bb 27       	eor	r27, r27
 b30:	66 27       	eor	r22, r22
 b32:	77 27       	eor	r23, r23
 b34:	cb 01       	movw	r24, r22
 b36:	97 f9       	bld	r25, 7
 b38:	08 95       	ret

00000b3a <__mulsf3>:
 b3a:	0b d0       	rcall	.+22     	; 0xb52 <__mulsf3x>
 b3c:	78 c0       	rjmp	.+240    	; 0xc2e <__fp_round>
 b3e:	69 d0       	rcall	.+210    	; 0xc12 <__fp_pscA>
 b40:	28 f0       	brcs	.+10     	; 0xb4c <__mulsf3+0x12>
 b42:	6e d0       	rcall	.+220    	; 0xc20 <__fp_pscB>
 b44:	18 f0       	brcs	.+6      	; 0xb4c <__mulsf3+0x12>
 b46:	95 23       	and	r25, r21
 b48:	09 f0       	breq	.+2      	; 0xb4c <__mulsf3+0x12>
 b4a:	5a c0       	rjmp	.+180    	; 0xc00 <__fp_inf>
 b4c:	5f c0       	rjmp	.+190    	; 0xc0c <__fp_nan>
 b4e:	11 24       	eor	r1, r1
 b50:	ee cf       	rjmp	.-36     	; 0xb2e <__fp_szero>

00000b52 <__mulsf3x>:
 b52:	ca df       	rcall	.-108    	; 0xae8 <__fp_split3>
 b54:	a0 f3       	brcs	.-24     	; 0xb3e <__mulsf3+0x4>

00000b56 <__mulsf3_pse>:
 b56:	95 9f       	mul	r25, r21
 b58:	d1 f3       	breq	.-12     	; 0xb4e <__mulsf3+0x14>
 b5a:	95 0f       	add	r25, r21
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	55 1f       	adc	r21, r21
 b60:	62 9f       	mul	r22, r18
 b62:	f0 01       	movw	r30, r0
 b64:	72 9f       	mul	r23, r18
 b66:	bb 27       	eor	r27, r27
 b68:	f0 0d       	add	r31, r0
 b6a:	b1 1d       	adc	r27, r1
 b6c:	63 9f       	mul	r22, r19
 b6e:	aa 27       	eor	r26, r26
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	aa 1f       	adc	r26, r26
 b76:	64 9f       	mul	r22, r20
 b78:	66 27       	eor	r22, r22
 b7a:	b0 0d       	add	r27, r0
 b7c:	a1 1d       	adc	r26, r1
 b7e:	66 1f       	adc	r22, r22
 b80:	82 9f       	mul	r24, r18
 b82:	22 27       	eor	r18, r18
 b84:	b0 0d       	add	r27, r0
 b86:	a1 1d       	adc	r26, r1
 b88:	62 1f       	adc	r22, r18
 b8a:	73 9f       	mul	r23, r19
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	83 9f       	mul	r24, r19
 b94:	a0 0d       	add	r26, r0
 b96:	61 1d       	adc	r22, r1
 b98:	22 1f       	adc	r18, r18
 b9a:	74 9f       	mul	r23, r20
 b9c:	33 27       	eor	r19, r19
 b9e:	a0 0d       	add	r26, r0
 ba0:	61 1d       	adc	r22, r1
 ba2:	23 1f       	adc	r18, r19
 ba4:	84 9f       	mul	r24, r20
 ba6:	60 0d       	add	r22, r0
 ba8:	21 1d       	adc	r18, r1
 baa:	82 2f       	mov	r24, r18
 bac:	76 2f       	mov	r23, r22
 bae:	6a 2f       	mov	r22, r26
 bb0:	11 24       	eor	r1, r1
 bb2:	9f 57       	subi	r25, 0x7F	; 127
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	8a f0       	brmi	.+34     	; 0xbda <__mulsf3_pse+0x84>
 bb8:	e1 f0       	breq	.+56     	; 0xbf2 <__mulsf3_pse+0x9c>
 bba:	88 23       	and	r24, r24
 bbc:	4a f0       	brmi	.+18     	; 0xbd0 <__mulsf3_pse+0x7a>
 bbe:	ee 0f       	add	r30, r30
 bc0:	ff 1f       	adc	r31, r31
 bc2:	bb 1f       	adc	r27, r27
 bc4:	66 1f       	adc	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	91 50       	subi	r25, 0x01	; 1
 bcc:	50 40       	sbci	r21, 0x00	; 0
 bce:	a9 f7       	brne	.-22     	; 0xbba <__mulsf3_pse+0x64>
 bd0:	9e 3f       	cpi	r25, 0xFE	; 254
 bd2:	51 05       	cpc	r21, r1
 bd4:	70 f0       	brcs	.+28     	; 0xbf2 <__mulsf3_pse+0x9c>
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <__fp_inf>
 bd8:	aa cf       	rjmp	.-172    	; 0xb2e <__fp_szero>
 bda:	5f 3f       	cpi	r21, 0xFF	; 255
 bdc:	ec f3       	brlt	.-6      	; 0xbd8 <__mulsf3_pse+0x82>
 bde:	98 3e       	cpi	r25, 0xE8	; 232
 be0:	dc f3       	brlt	.-10     	; 0xbd8 <__mulsf3_pse+0x82>
 be2:	86 95       	lsr	r24
 be4:	77 95       	ror	r23
 be6:	67 95       	ror	r22
 be8:	b7 95       	ror	r27
 bea:	f7 95       	ror	r31
 bec:	e7 95       	ror	r30
 bee:	9f 5f       	subi	r25, 0xFF	; 255
 bf0:	c1 f7       	brne	.-16     	; 0xbe2 <__mulsf3_pse+0x8c>
 bf2:	fe 2b       	or	r31, r30
 bf4:	88 0f       	add	r24, r24
 bf6:	91 1d       	adc	r25, r1
 bf8:	96 95       	lsr	r25
 bfa:	87 95       	ror	r24
 bfc:	97 f9       	bld	r25, 7
 bfe:	08 95       	ret

00000c00 <__fp_inf>:
 c00:	97 f9       	bld	r25, 7
 c02:	9f 67       	ori	r25, 0x7F	; 127
 c04:	80 e8       	ldi	r24, 0x80	; 128
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	60 e0       	ldi	r22, 0x00	; 0
 c0a:	08 95       	ret

00000c0c <__fp_nan>:
 c0c:	9f ef       	ldi	r25, 0xFF	; 255
 c0e:	80 ec       	ldi	r24, 0xC0	; 192
 c10:	08 95       	ret

00000c12 <__fp_pscA>:
 c12:	00 24       	eor	r0, r0
 c14:	0a 94       	dec	r0
 c16:	16 16       	cp	r1, r22
 c18:	17 06       	cpc	r1, r23
 c1a:	18 06       	cpc	r1, r24
 c1c:	09 06       	cpc	r0, r25
 c1e:	08 95       	ret

00000c20 <__fp_pscB>:
 c20:	00 24       	eor	r0, r0
 c22:	0a 94       	dec	r0
 c24:	12 16       	cp	r1, r18
 c26:	13 06       	cpc	r1, r19
 c28:	14 06       	cpc	r1, r20
 c2a:	05 06       	cpc	r0, r21
 c2c:	08 95       	ret

00000c2e <__fp_round>:
 c2e:	09 2e       	mov	r0, r25
 c30:	03 94       	inc	r0
 c32:	00 0c       	add	r0, r0
 c34:	11 f4       	brne	.+4      	; 0xc3a <__fp_round+0xc>
 c36:	88 23       	and	r24, r24
 c38:	52 f0       	brmi	.+20     	; 0xc4e <__fp_round+0x20>
 c3a:	bb 0f       	add	r27, r27
 c3c:	40 f4       	brcc	.+16     	; 0xc4e <__fp_round+0x20>
 c3e:	bf 2b       	or	r27, r31
 c40:	11 f4       	brne	.+4      	; 0xc46 <__fp_round+0x18>
 c42:	60 ff       	sbrs	r22, 0
 c44:	04 c0       	rjmp	.+8      	; 0xc4e <__fp_round+0x20>
 c46:	6f 5f       	subi	r22, 0xFF	; 255
 c48:	7f 4f       	sbci	r23, 0xFF	; 255
 c4a:	8f 4f       	sbci	r24, 0xFF	; 255
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	08 95       	ret

00000c50 <_exit>:
 c50:	f8 94       	cli

00000c52 <__stop_program>:
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <__stop_program>
